# si service configure
server {
  listen          80;
  default_type    'text/plain';
  error_log       logs/dev.error.log warn;

  # set up gloable
  set_by_lua $build_version 'return os.getenv("NURL_BUILD_VERSION")';
  set_by_lua $build_target 'return os.getenv("NURL_BUILD_TARGET") or "production" ';

  location = /version {
    echo $build_version;
  }

  location = /target {
    echo $build_target;
  }

  location = /pack {
    content_by_lua_block{
      local ju = require("json_util")
      local ShortUrl = require("shorturl")
      local shorter = ShortUrl:new("/redis_raw")
      local res_obj = {}
      local url = ngx.unescape_uri(ngx.var.arg_url)
      if url == nil or string.len(url) == 0 then
        res_obj["code"] = 1
        res_obj["msg"] = 'input url empty'
      else
        local su = shorter:pack(url)
        if su ~= nil then
          res_obj["code"] = 0
          res_obj["id"] = su.id
          res_obj["url"] = su.url
          if su.id ~= nil then
            -- add to queue
            local redis = require "redis2"
            local red = redis:new("/redis_raw")
            red:rpush("upload:queue", su.id)
          end
        else
          res_obj["code"] = 1
          res_obj["msg"] = 'pack error'
        end
      end

      ngx.say(ju.sendJson(res_obj))
      ngx.exit(ngx.HTTP_OK)
    }
  }

  location = /unpack {
    content_by_lua_block{
      local ju = require("json_util")
      local ShortUrl = require("shorturl")
      local shorter = ShortUrl:new("/redis_raw")
      local res_obj = {}
      local url = ngx.unescape_uri(ngx.var.arg_url)
      local su = shorter:unpack(url)
      if su == nil then
        res_obj["code"] = 1
        res_obj["msg"] = 'can not find source url'
      else
        if su ~= nil then
          res_obj["code"] = 0
          res_obj["id"] = su.id
          res_obj["url"] = su.url
        else
          res_obj["code"] = 1
          res_obj["msg"] = "unpack error"
        end
      end

      ngx.say(ju.sendJson(res_obj))
      ngx.exit(ngx.HTTP_OK)
    }
  }

  location / {
    content_by_lua_block {
      local surl = string.gsub(ngx.var.request_uri, "?.*", ""):sub(2)
      local ju = require("json_util")
      local ShortUrl = require("shorturl")
      local shorter = ShortUrl:new("/redis_raw")
      local su = shorter:unpack(surl)
      if su == nil then
        ngx.exit(ngx.HTTP_NOT_FOUND)
      else
        if su.url ~= nil then
          ngx.redirect(su.url, 301)
        else
          ngx.exit(ngx.HTTP_NOT_FOUND)
        end
      end
    }
  }

  # set redis async url
  location = /redis_raw {
		internal;
		redis2_raw_query $echo_request_body;
		redis2_pass redis_backend;
		redis2_connect_timeout 1s;
		redis2_send_timeout	2s;
		redis2_read_timeout	2s;
	}
}
